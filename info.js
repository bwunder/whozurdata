
// information kiosk    
module_exports= { 
  "name": 'Unique label for a data store',
  "docs": {
    "store": 'URL of store homepage - required',
    "driver": 'URL of driver homepage - required',
    "other": 'URL of driver homepage - required',
    "usecase": [ 'ordered associative list',
                 'buffered as 1-deep JSON document'].join('\n') ,
    "notes": [
'stores is a collection of named persistent data storage instances',
' (e.g, name/value pairs built from top level keys)',
'names is an array of store names - always built from stores', 
'name occurs twice in the object, as the key and as the name element',
'prototypical store', 
'      ',
' { namestring: { name: string,',
'                 driver: string,',
'                 filename: string,',
'                 options: { string: string|number|[array], ...  },',
'                 queries: { read: function,', 
'                            insert: function(){},', 
'                            update: function(){},', 
'                            upsert: function(){},', 
'                            delete: function(){},', 
'                            opstring : function(...){},', 
'                            ... },',
'                 docs: { store: url, driver: url, string: url, ... },',
'                 source: [ { store: function },', 
'                           { driver: function },', 
'                           { keystring: function }, ... ]', 
'               },',  
'   namestring: { ... },', 
'   ...',
' }',
'insert store to scratch is not persistent after a server restart',  
'scratch module always loaded from file at node server start-up',
'all valid store modules loaded from file at node server start-up',
'level-1 keys are schematic',
'stores with store lifetime must already exist and may be updated when the db is changed',   
'stores with session lifetime may be created but not included w/out restart',
'scratch emits insert, update, delete events and so self-populate from any/every store in chain',
'stores are maintained by listeners and may support any direct queries desired',
'this allows optimal normalized searching (without heavy transactional burden)',
'optimal sharding and caching  optimal interaction with the unit of aggregation',  
'modules uses pre-packaged community drivers to optimizations event handlers',   
'pure javasvcript gets preferential consideration by default',              
].join("\n")
  }, 
  "driver": 'NPM package for nodejs database API ', 
  "filename": '"module.filename" is loaded into the node process',      
  "options": { 
    "keyA": 'any alphanumeric scalar value or array, keys and key names will vary by store',
    "keyB": 'provide all options required by driver to connect node server to db',
    "keyC": 'values may include username/password, location, URI, IP, port and fail-over config',
    "usecase": "JSON object", 
  },   
  "queries": {  
    "read": [ 'prototype:', 
              '  function read ( names, keys ) { return [{}]; }',
              'inputs:',
              '  array of _names_ of __stores__', 
              '  array of top level _keys_', 
              'return:',
              '  array of objects ',
              '  each object is top level _keys_ from _stores_', 
              '' ].join("\n"),
    "insert": [ 'prototype: function insert ( stores )  {}',
                'add store(s) to the scratch',
                'inputs',
                '  stores - array of store objects to be added',
                'return',
                '  no return value required if execution succeeds',
                '  new store must be valid store and not already in stores by name',                
                'scratch emits insert event, other stores require listeners to stay fresh',
                '' ].join("\n"),
    "update": [ 'prototype: function update ( objects )  {...}',
                'update specified key pairs in one or more store',
                'no return value required if execution succeeds',
                'app will display a success text message if returned from call.',  
                'inputs',    
                '  objects - array of objects containing key pairs for updated',
                '  must all be store keys and name must be one of the keys',
                'scratch emits update event, other stores require listeners to stay fresh',
                '' ].join("\n"),                    
    "upsert": [ 'prototype: function upsert ( stores )  {...}',
                'update, else insert of not exists, one or more stores',
                'no return value required if execution succeeds',
                'app will display a success text message if returned from call.',  
                'inputs',    
                '  stores - array of objects containing key pairs for upsert',
                'validations',
                'scratch emits insert and update event, other stores require listeners to stay fresh',
                '' ].join("\n"),                    
    "remove": [ 'prototype: function remove ( names )  {...}',
                'remove one or more stores by name',
                'no return value required if execution succeeds',
                'app will display a success text message if returned from call.',  
                'inputs',    
                '  names - array of store names to be removed',
                'scratch emits delete or update event, other stores require listeners to stay fresh',
                '' ].join("\n")                
  },
  "source": [    // associative heap of hyperlinks, order is not imposed on collection
    { "store": "https://code.google.com/p/v8/" },
    { "driver": "https://github.com/bwunder/whozurdata" },
    { "nodejs": "https://github.com/joyent/node" },
    { "json": "https://github.com/douglascrockford/JSON-js" }, 
    { "usecase": 'associative heap of named links' }
  ]  
} 
