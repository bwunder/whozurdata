var app = require('../app');
var fs = require('fs');
var https = require('https');
var socketio = require('socket.io');
var p2p = require('socket.io-p2p-server');
var debug = require('debug')('*'); 

/**
 * HTTPS server certificate options
 * see prestart.sh
 */
var options = { key: fs.readFileSync('sslkey.pem'), 
                cert: fs.readFileSync('sslcert.pem'),
                passphrase: 'test'};

/**
 * Get port from environment, if is one, and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTPS server.
 */

// tls... instead of var server = http.createServer(app);
var server = https.createServer(options, app);
var io = socketio(server); 
// peer to peer coordination among currently active sockets
var p2pserver = p2p.Server;
io.use(p2pserver);

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);
server.listen(port);

/**
 * socket.io handler
 */


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
debug('Listening on ' + bind + '\n' +
      'debugger output includes namespace ' + debug.namespace);
}
